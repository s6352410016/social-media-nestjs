// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN

  @@map("role")
}

enum ProviderType {
  LOCAL
  GOOGLE
  GITHUB

  @@map("provider_type")
}

enum ContentType {
  POST
  COMMENT
  REPLY

  @@map("content_type")
}

enum NotificationType {
  LIKE
  COMMENT
  FOLLOW
  SHARE
  POST
  REPLY

  @@map("notification_type")
}

model User {
  id                   Int       @id @default(autoincrement())
  fullname             String
  username             String?   @unique
  email                String    @unique
  passwordHash         String?   @map("password_hash")
  dateOfBirth          DateTime? @map("date_of_birth")
  profileUrl           String?   @map("profile_url")
  profileBackgroundUrl String?   @map("profile_background_url")
  info                 String?
  role                 Role      @default(USER)
  createdAt            DateTime  @default(now()) @map("created_at")
  updatedAt            DateTime  @updatedAt @map("updated_at")

  provider              Provider?
  otp                   Otp?
  posts                 Post[]
  comments              Comment[]
  likes                 Like[]
  senderNotifications   Notification[] @relation("SenderNotifications")
  receiverNotifications Notification[] @relation("ReceiverNotifications")

  @@map("users")
}

model Provider {
  id           Int          @id @default(autoincrement())
  providerType ProviderType @default(LOCAL) @map("provider_type")
  providerId   String?      @unique @map("provider_id")
  createdAt    DateTime     @default(now()) @map("created_at")
  updatedAt    DateTime     @updatedAt @map("updated_at")

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int  @unique @map("user_id")

  @@map("providers")
}

model Otp {
  id        Int      @id @default(autoincrement())
  otpHash   String   @map("otp_hash")
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user  User   @relation(fields: [email], references: [email], onDelete: Cascade)
  email String @unique

  @@map("otps")
}

model Post {
  id        Int      @id @default(autoincrement())
  message   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int  @map("user_id")

  parent   Post? @relation("PostToSharePosts", fields: [parentId], references: [id], onDelete: Cascade)
  parentId Int?  @map("parent_id")

  sharePosts    Post[]         @relation("PostToSharePosts")
  comments      Comment[]
  likes         Like[]
  notifications Notification[]

  @@map("posts")
}

model Comment {
  id        Int      @id @default(autoincrement())
  message   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int  @map("post_id")

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int  @map("user_id")

  parent   Comment? @relation("CommentToReplies", fields: [parentId], references: [id], onDelete: Cascade)
  parentId Int?     @map("parent_id")

  replies       Comment[]      @relation("CommentToReplies")
  likes         Like[]
  notifications Notification[]

  @@map("comments")
}

model File {
  id        Int      @id @default(autoincrement())
  fileUrl   String   @map("file_url")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  contentId   Int         @map("content_id")
  contentType ContentType @map("content_type")

  @@unique([contentId, contentType, fileUrl])
  @@map("files")
}

model Like {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int  @map("user_id")

  post   Post? @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int?  @map("post_id")

  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId Int?     @map("comment_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([userId, postId])
  @@unique([userId, commentId])
  @@map("likes")
}

model Notification {
  // id         String           @id @default(uuid())
  id     Int  @id @default(autoincrement())
  type       NotificationType
  senderId   Int              @map("sender_id")
  receiverId Int              @map("receiver_id")
  postId     Int?             @map("post_id")
  commentId  Int?             @map("comment_id")
  message    String
  isRead     Boolean          @default(false) @map("is_read")
  createdAt  DateTime         @default(now()) @map("created_at")
  updatedAt  DateTime         @updatedAt @map("updated_at")

  sender   User     @relation("SenderNotifications", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User     @relation("ReceiverNotifications", fields: [receiverId], references: [id], onDelete: Cascade)
  post     Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment  Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@map("notifications")
}
